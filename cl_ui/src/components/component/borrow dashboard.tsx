/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/l9sZtNODiWy
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Comfortaa } from 'next/font/google'
import { Gabarito } from 'next/font/google'

comfortaa({
  subsets: ['latin'],
  display: 'swap',
})

gabarito({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuCheckboxItem } from "@/components/ui/dropdown-menu"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"

export function Borrow Dashboard() {
  const [search, setSearch] = useState("")
  const [sort, setSort] = useState({ key: "loanAmount", order: "desc" })
  const [filters, setFilters] = useState({
    loanStatus: [],
    loanDuration: [],
  })
  const loans = useMemo(
    () =>
      [
        {
          id: "LOAN001",
          loanStatus: "Active",
          loanAmount: 10000,
          loanDuration: "12 months",
          interestRate: 8.5,
          createdAt: "2023-06-15",
        },
        {
          id: "LOAN002",
          loanStatus: "Pending",
          loanAmount: 5000,
          loanDuration: "6 months",
          interestRate: 7.2,
          createdAt: "2023-07-01",
        },
        {
          id: "LOAN003",
          loanStatus: "Completed",
          loanAmount: 15000,
          loanDuration: "24 months",
          interestRate: 9.0,
          createdAt: "2023-07-10",
        },
        {
          id: "LOAN004",
          loanStatus: "Active",
          loanAmount: 20000,
          loanDuration: "18 months",
          interestRate: 8.2,
          createdAt: "2023-07-20",
        },
        {
          id: "LOAN005",
          loanStatus: "Pending",
          loanAmount: 8000,
          loanDuration: "9 months",
          interestRate: 7.8,
          createdAt: "2023-08-01",
        },
      ]
        .filter((loan) => {
          const searchValue = search.toLowerCase()
          return (
            loan.id.toLowerCase().includes(searchValue) ||
            loan.loanStatus.toLowerCase().includes(searchValue) ||
            loan.loanAmount.toString().includes(searchValue) ||
            loan.loanDuration.toLowerCase().includes(searchValue) ||
            loan.interestRate.toString().includes(searchValue) ||
            loan.createdAt.includes(searchValue)
          )
        })
        .sort((a, b) => {
          if (sort.order === "asc") {
            return a[sort.key] > b[sort.key] ? 1 : -1
          } else {
            return a[sort.key] < b[sort.key] ? 1 : -1
          }
        }),
    [search, sort, filters],
  )
  const handleSearch = (e) => setSearch(e.target.value)
  const handleSort = (key) => {
    if (sort.key === key) {
      setSort({ key, order: sort.order === "asc" ? "desc" : "asc" })
    } else {
      setSort({ key, order: "desc" })
    }
  }
  const handleFilter = (type, value) => {
    setFilters((prevFilters) => ({
      ...prevFilters,
      [type]: prevFilters[type].includes(value)
        ? prevFilters[type].filter((item) => item !== value)
        : [...prevFilters[type], value],
    }))
  }
  return (
    <div className="flex flex-col min-h-[100dvh]">
      <header className="bg-primary text-primary-foreground py-4 px-6 flex items-center justify-between">
        <Link href="#" className="flex items-center gap-2" prefetch={false}>
          <CoinsIcon className="h-8 w-8" />
          <span className="text-xl font-bold">CryptoLends</span>
        </Link>
        <nav className="hidden md:flex items-center gap-4">
          <Link href="#" className="hover:underline underline-offset-4" prefetch={false}>
            Lend
          </Link>
          <Link href="#" className="hover:underline underline-offset-4" prefetch={false}>
            Borrow
          </Link>
          <Link href="#" className="hover:underline underline-offset-4" prefetch={false}>
            About
          </Link>
          <Link href="#" className="hover:underline underline-offset-4" prefetch={false}>
            Contact
          </Link>
        </nav>
        <Button variant="secondary">Connect Wallet</Button>
      </header>
      <main className="flex-1">
        <section className="bg-background py-12 px-6 md:px-12">
          <div className="max-w-5xl mx-auto space-y-8">
            <div className="flex items-center justify-between">
              <h1 className="text-3xl font-bold">Loan Dashboard</h1>
              <div className="flex items-center gap-4">
                <Input placeholder="Search loans..." value={search} onChange={handleSearch} className="max-w-xs" />
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline">
                      <ArrowUpDownIcon className="h-4 w-4 mr-2" />
                      Sort by
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[200px]" align="end">
                    <DropdownMenuRadioGroup value={sort.key}>
                      <DropdownMenuRadioItem value="id" onClick={() => handleSort("id")}>
                        ID
                        {sort.key === "id" && (
                          <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
                        )}
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="loanStatus" onClick={() => handleSort("loanStatus")}>
                        Status
                        {sort.key === "loanStatus" && (
                          <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
                        )}
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="loanAmount" onClick={() => handleSort("loanAmount")}>
                        Loan Amount
                        {sort.key === "loanAmount" && (
                          <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
                        )}
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="loanDuration" onClick={() => handleSort("loanDuration")}>
                        Loan Duration
                        {sort.key === "loanDuration" && (
                          <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
                        )}
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="interestRate" onClick={() => handleSort("interestRate")}>
                        Interest Rate
                        {sort.key === "interestRate" && (
                          <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
                        )}
                      </DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value="createdAt" onClick={() => handleSort("createdAt")}>
                        Created At
                        {sort.key === "createdAt" && (
                          <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>
                        )}
                      </DropdownMenuRadioItem>
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>
            <div className="grid gap-4">
              <div className="flex items-center gap-4">
                <span className="font-medium">Filters:</span>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline">
                      Loan Status
                      {filters.loanStatus.length > 0 && (
                        <span className="ml-2 bg-primary px-2 py-1 rounded-full text-xs text-primary-foreground">
                          {filters.loanStatus.length}
                        </span>
                      )}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[200px]">
                    <DropdownMenuCheckboxItem
                      checked={filters.loanStatus.includes("Active")}
                      onCheckedChange={() => handleFilter("loanStatus", "Active")}
                    >
                      Active
                    </DropdownMenuCheckboxItem>
                    <DropdownMenuCheckboxItem
                      checked={filters.loanStatus.includes("Pending")}
                      onCheckedChange={() => handleFilter("loanStatus", "Pending")}
                    >
                      Pending
                    </DropdownMenuCheckboxItem>
                    <DropdownMenuCheckboxItem
                      checked={filters.loanStatus.includes("Completed")}
                      onCheckedChange={() => handleFilter("loanStatus", "Completed")}
                    >
                      Completed
                    </DropdownMenuCheckboxItem>
                  </DropdownMenuContent>
                </DropdownMenu>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline">
                      Loan Duration
                      {filters.loanDuration.length > 0 && (
                        <span className="ml-2 bg-primary px-2 py-1 rounded-full text-xs text-primary-foreground">
                          {filters.loanDuration.length}
                        </span>
                      )}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[200px]">
                    <DropdownMenuCheckboxItem
                      checked={filters.loanDuration.includes("6 months")}
                      onCheckedChange={() => handleFilter("loanDuration", "6 months")}
                    >
                      6 months
                    </DropdownMenuCheckboxItem>
                    <DropdownMenuCheckboxItem
                      checked={filters.loanDuration.includes("9 months")}
                      onCheckedChange={() => handleFilter("loanDuration", "9 months")}
                    >
                      9 months
                    </DropdownMenuCheckboxItem>
                    <DropdownMenuCheckboxItem
                      checked={filters.loanDuration.includes("12 months")}
                      onCheckedChange={() => handleFilter("loanDuration", "12 months")}
                    >
                      12 months
                    </DropdownMenuCheckboxItem>
                    <DropdownMenuCheckboxItem
                      checked={filters.loanDuration.includes("18 months")}
                      onCheckedChange={() => handleFilter("loanDuration", "18 months")}
                    >
                      18 months
                    </DropdownMenuCheckboxItem>
                    <DropdownMenuCheckboxItem
                      checked={filters.loanDuration.includes("24 months")}
                      onCheckedChange={() => handleFilter("loanDuration", "24 months")}
                    >
                      24 months
                    </DropdownMenuCheckboxItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[100px]">ID</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Loan Amount</TableHead>
                    <TableHead>Loan Duration</TableHead>
                    <TableHead className="text-right">Interest Rate</TableHead>
                    <TableHead className="text-right">Created At</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {loans.map((loan) => (
                    <TableRow key={loan.id}>
                      <TableCell className="font-medium">{loan.id}</TableCell>
                      <TableCell>
                        <Badge
                          variant={
                            loan.loanStatus === "Completed"
                              ? "success"
                              : loan.loanStatus === "Active"
                              ? "outline"
                              : "secondary"
                          }
                        >
                          {loan.loanStatus}
                        </Badge>
                      </TableCell>
                      <TableCell className="text-right">${loan.loanAmount.toFixed(2)}</TableCell>
                      <TableCell>{loan.loanDuration}</TableCell>
                      <TableCell className="text-right">{loan.interestRate}%</TableCell>
                      <TableCell className="text-right">{loan.createdAt}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </div>
        </section>
      </main>
      <footer className="bg-primary text-primary-foreground py-6 px-6 md:px-12 flex flex-col md:flex-row items-center justify-between">
        <div className="flex items-center gap-2">
          <CoinsIcon className="h-6 w-6" />
          <span>&copy; 2024 CryptoLends. All rights reserved.</span>
        </div>
        <nav className="flex items-center gap-4 mt-4 md:mt-0">
          <Link href="#" className="hover:underline underline-offset-4" prefetch={false}>
            Terms of Service
          </Link>
          <Link href="#" className="hover:underline underline-offset-4" prefetch={false}>
            Privacy Policy
          </Link>
          <Link href="#" className="hover:underline underline-offset-4" prefetch={false}>
            Contact Us
          </Link>
        </nav>
      </footer>
    </div>
  )
}

function ArrowUpDownIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m21 16-4 4-4-4" />
      <path d="M17 20V4" />
      <path d="m3 8 4-4 4 4" />
      <path d="M7 4v16" />
    </svg>
  )
}


function CoinsIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="8" cy="8" r="6" />
      <path d="M18.09 10.37A6 6 0 1 1 10.34 18" />
      <path d="M7 6h1v4" />
      <path d="m16.71 13.88.7.71-2.82 2.82" />
    </svg>
  )
}
