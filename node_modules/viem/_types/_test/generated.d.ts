export declare const ierc1271WalletABI: readonly [{
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "hash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignature";
    readonly outputs: readonly [{
        readonly name: "magicValue";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
}];
export declare const verifySigABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_hash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "_signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_hash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "_signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidUniversalSig";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}];
export declare const erc20InvalidTransferEventABI: readonly [{
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [];
}];
export declare const gh434ABI: readonly [{
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "bar";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "baz";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "foo";
    readonly outputs: readonly [{
        readonly name: "a";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "b";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
}];
export declare const ensAvatarTokenUriABI: readonly [{
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ownerOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}];
export declare const errorsExampleABI: readonly [{
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "foo";
        readonly internalType: "struct ErrorsExample.Foo";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "bar";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "message";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "number";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ComplexError";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "message";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "SimpleError";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SimpleErrorNoArgs";
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "assertRead";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "assertWrite";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "complexCustomRead";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "complexCustomWrite";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "divideByZeroRead";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "divideByZeroWrite";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "overflowRead";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "overflowWrite";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "requireRead";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "requireWrite";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "revertRead";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "revertWrite";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "simpleCustomRead";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "simpleCustomReadNoArgs";
    readonly outputs: readonly [];
}, {
    readonly stateMutability: "nonpayable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "simpleCustomWrite";
    readonly outputs: readonly [];
}];
export declare const offchainLookupExampleABI: readonly [{
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "urls_";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "urls";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "callData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "callbackFunction";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "OffchainLookup";
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "getAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "result";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "extraData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "getAddressWithProof";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_ethSignedMessageHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "_signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "recoverSigner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
}, {
    readonly stateMutability: "pure";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "splitSignature";
    readonly outputs: readonly [{
        readonly name: "r";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
}, {
    readonly stateMutability: "view";
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "urls";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
}];
export declare const payableABI: readonly [{
    readonly stateMutability: "payable";
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pay";
    readonly outputs: readonly [];
}];
//# sourceMappingURL=generated.d.ts.map